<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Web Audio API</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        .control-group { margin: 15px 0; padding: 15px; background: #f0f0f0; border-radius: 8px; }
        button { padding: 10px 15px; margin: 5px; font-size: 16px; }
        input[type="range"] { width: 200px; }
    </style>
</head>
<body>
    <h1>üéÆ Web Audio API</h1>

    <div class="control-group">
        <h3>Oscilador - Generador de Tonos</h3>
        <button onclick="playTone(261.63)">Do (C)</button>
        <button onclick="playTone(293.66)">Re (D)</button>
        <button onclick="playTone(329.63)">Mi (E)</button>
        <button onclick="playTone(349.23)">Fa (F)</button>
        <button onclick="playTone(392.00)">Sol (G)</button>
        <button onclick="playTone(440.00)">La (A)</button>
        <button onclick="playTone(493.88)">Si (B)</button>
        <button onclick="stopTone()">‚èπÔ∏è Detener</button>
    </div>

    <div class="control-group">
        <h3>Ecualizador</h3>
        <label>Frecuencia: <input type="range" id="freq" min="100" max="1000" value="440" oninput="updateFreq()"></label>
        <label>Ganancia: <input type="range" id="gain" min="0" max="1" step="0.1" value="0.5" oninput="updateGain()"></label>
    </div>

    <div class="control-group">
        <h3>Analizador de Frecuencias</h3>
        <canvas id="visualizer" width="400" height="200"></canvas>
        <br>
        <button onclick="startVisualizer()">Iniciar Visualizador</button>
    </div>

    <script>
        let audioContext;
        let oscillator;
        let gainNode;
        let analyser;
        let animationId;

        function initAudio() {
            if (!audioContext) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
            }
        }

        function playTone(frequency) {
            initAudio();
            
            if (oscillator) {
                oscillator.stop();
            }
            
            oscillator = audioContext.createOscillator();
            gainNode = audioContext.createGain();
            analyser = audioContext.createAnalyser();
            
            oscillator.connect(gainNode);
            gainNode.connect(analyser);
            analyser.connect(audioContext.destination);
            
            oscillator.type = 'sine';
            oscillator.frequency.value = frequency;
            gainNode.gain.value = document.getElementById('gain').value;
            
            oscillator.start();
        }

        function stopTone() {
            if (oscillator) {
                oscillator.stop();
                oscillator = null;
            }
            if (animationId) {
                cancelAnimationFrame(animationId);
            }
        }

        function updateFreq() {
            if (oscillator) {
                oscillator.frequency.value = document.getElementById('freq').value;
            }
        }

        function updateGain() {
            if (gainNode) {
                gainNode.gain.value = document.getElementById('gain').value;
            }
        }

        function startVisualizer() {
            initAudio();
            const canvas = document.getElementById('visualizer');
            const ctx = canvas.getContext('2d');
            
            if (!analyser) {
                // Crear un oscilador para la demostraci√≥n
                playTone(440);
            }
            
            analyser.fftSize = 256;
            const bufferLength = analyser.frequencyBinCount;
            const dataArray = new Uint8Array(bufferLength);
            
            function draw() {
                animationId = requestAnimationFrame(draw);
                
                analyser.getByteFrequencyData(dataArray);
                
                ctx.fillStyle = 'rgb(0, 0, 0)';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                const barWidth = (canvas.width / bufferLength) * 2.5;
                let barHeight;
                let x = 0;
                
                for(let i = 0; i < bufferLength; i++) {
                    barHeight = dataArray[i] / 2;
                    
                    ctx.fillStyle = `rgb(${barHeight + 100}, 50, 150)`;
                    ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);
                    
                    x += barWidth + 1;
                }
            }
            
            draw();
        }
    </script>
</body>
</html>